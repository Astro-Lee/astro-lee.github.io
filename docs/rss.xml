<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://astro-lee.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://astro-lee.github.io</link></image><lastBuildDate>Wed, 06 Aug 2025 12:40:17 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>bilby</title><link>https://astro-lee.github.io/post/bilby.html</link><description>bilby + PyMultiNest + MultiNest

```python
def multi_sbpl(x, c, breakpoints, alphas, deltas):
    '''
    多段平滑破幂律函数，幂律指数为负值形式 (-alpha_i)
    参数:
        x: 自变量 (array-like)
        c: 归一化常数
        breakpoints: 拐点列表 [xb1, xb2, ..., xb(n-1)]
        alphas: 正的幂律指数绝对值列表 [alpha1, alpha2, ..., alphan]
        deltas: 平滑参数列表 [delta1, delta2, ..., delta(n-1)]
    返回:
        f(x): SBPL 函数值
    '''
    x = np.array(x)
    # 初始幂律指数为 -alpha1
    result = 10**c * x**(-alphas[0])
    # 计算每个拐点的平滑过渡
    for i in range(len(breakpoints)):
        term = 1 + (x / breakpoints[i])**(1 / deltas[i])
        # 指数差为 -alpha_(i+1) - (-alpha_i) = alpha_i - alpha_(i+1)
        result *= term**(-deltas[i] * (alphas[i + 1] - alphas[i]))
    return result
```

```python
import pandas as pd

bilby_data = pd.read_csv('https://gitee.com/Astro-Lee/storage/raw/master/bilby_data.csv')
x_time = bilby_data['x_time']
x_flux = bilby_data['x_flux']
x_flux_err = bilby_data['x_flux_err']
```

```python
import os
# 设置 DYLD_LIBRARY_PATH（适用于 macOS）
multinest_lib_path = os.path.expanduser('~/Downloads/MultiNest/lib')
os.environ['DYLD_LIBRARY_PATH'] = multinest_lib_path + ':' + os.environ.get('DYLD_LIBRARY_PATH', '')
# （如果需要的话）显示设置是否成功
print('DYLD_LIBRARY_PATH =', os.environ['DYLD_LIBRARY_PATH'])
# 或者cp -v ~/Downloads/MultiNest/lib/lib* /anaconda3/lib/
```

```python
#!/usr/bin/env python
'''
An example of how to use bilby to perform parameter estimation for
non-gravitational wave data consisting of a Gaussian with a mean and variance
'''
import bilby
import numpy as np
from bilby.core.utils.random import rng, seed

# Sets seed of bilby's generator 'rng' to '123' to ensure reproducibility
seed(1234)

# Here is minimum requirement for a Likelihood class to run with bilby. In this
# case, we setup a GaussianLikelihood, which needs to have a log_likelihood
# method. Note, in this case we will NOT make use of the `bilby`
# waveform_generator to make the signal.

class SimpleGaussianLikelihood(bilby.Likelihood):
    def __init__(self, x, y, yerr):
        '''
        A very simple Gaussian likelihood

        Parameters
        ----------
        data: array_like
            The data to analyse
        '''
        super().__init__(parameters=dict())
        self.x = x
        self.y = y
        self.yerr = yerr

    def log_likelihood(self):
        c = self.parameters['c']  
        breakpoint1 = self.parameters['breakpoint1']
        breakpoint2 = self.parameters['breakpoint2']
        alpha1 = self.parameters['alpha1']
        alpha2 = self.parameters['alpha2']
        alpha3 = self.parameters['alpha3']
        log_f = self.parameters['log_f']     

        model = multi_sbpl(self.x, c, 
            breakpoints=[breakpoint1,breakpoint2], 
            alphas=[alpha1,alpha2,alpha3], 
            deltas=[0.1,0.1])

        res = self.y - model
        sigma2 = self.yerr**2 + model**2 * np.exp(2 * log_f)
        
        loglike = -0.5 * np.sum(res**2 / sigma2 + np.log(2 * np.pi * sigma2))

        return loglike

likelihood = SimpleGaussianLikelihood(x_time, x_flux, x_flux_err)

priors = dict(
    c = bilby.core.prior.Uniform(-4, -3, 'k',r'$c$'),
    breakpoint1 = bilby.core.prior.Uniform(200, 500, 'breakpoint1',r'$breakpoint1$'),
    breakpoint2 = bilby.core.prior.Uniform(500,10000, 'breakpoint2',r'$breakpoint2$'),
    alpha1 = bilby.core.prior.Uniform(-1, 1, 'alpha1',r'$alpha1$'),
    alpha2 = bilby.core.prior.Uniform(1, 2, 'alpha2', r'$alpha2$'),
    alpha3 = bilby.core.prior.Uniform(1, 2, 'alpha3', r'$alpha3$'),
    log_f = bilby.core.prior.Uniform(-10., 1., 'log_f', r'$\log f_\mathrm{sys}$'),
)
```

```python
# A few simple setup steps
label = '10keV-2broken'
outdir = 'outdir'

# And run sampler
result = bilby.run_sampler(
    likelihood=likelihood,
    priors=priors,
    outdir=outdir,
    label=label,
    sampler='pymultinest',
    importance_nested_sampling=True,
    verbose=False,
    nlive=2000,
    resume=True,
    clean=False,
)
```

```python
result.plot_corner(save=True, filename='corner.pdf',
show_titles=True, quantiles=[0.16, 0.5, 0.84], 
labels=[prior_dist.latex_label for key, prior_dist in priors.items()]
)
```

&lt;img width='1578' height='1600' alt='Image' src='https://github.com/user-attachments/assets/ed77ce4b-7ed3-4d2c-9b49-35d36ee72ccb' /&gt;

```python
print(label)
print(f'log Z = {result.log_evidence} ± {result.log_evidence_err}\n')

quantile_tab = result.posterior.quantile([0.16, 0.5, 0.84])
# 遍历所有列，打印中位数和上下误差
for col in quantile_tab.columns[:-2]:
    q16 = quantile_tab.loc[0.16, col]
    q50 = quantile_tab.loc[0.50, col]
    q84 = quantile_tab.loc[0.84, col]

    err_low = q50 - q16
    err_high = q84 - q50

    print(f'{col} = {q50:.6f} (+{err_high:.6f}/-{err_low:.6f})')
```

输出结果
```bash
# 10keV-2broken
# log Z = 12270.607387903234 ± 0.09746941609724716

# c = -3.661216 (+0.147197/-0.145641)
# breakpoint1 = 272.599363 (+12.038642/-11.232960)
# breakpoint2 = 1325.521828 (+424.605908/-306.887697)
# alpha1 = -0.033724 (+0.066284/-0.066135)
# alpha2 = 1.273952 (+0.029515/-0.033641)
# alpha3 = 1.550395 (+0.028099/-0.022251)
# log_f = -1.433169 (+0.029608/-0.029620)

# 10keV-1broken
# log Z = 12250.889339996882 ± 0.08563383228929447

# c = -3.359253 (+0.130664/-0.124555)
# breakpoint1 = 333.251729 (+11.848272/-10.852528)
# alpha1 = 0.107049 (+0.057266/-0.054615)
# alpha2 = 1.471793 (+0.011757/-0.011525)
# log_f = -1.400355 (+0.028854/-0.029786)
```
计算对数贝叶斯因子（ln Bayes Factor）
$\ln B = \log Z_{\text{2break}} - \log Z_{\text{1break}} \approx 20$

根据 Jeffreys scale 判断
| ln(Bayes Factor)      | 强度解释（Jeffreys scale)          |
| :------------------: | :-----------------------------: |
| 0–1                            | 不可区分 (Inconclusive)              |
| 1–2.5                         | 弱证据 (Weak evidence)             |
| 2.5–5                        | 中等证据 (Moderate evidence)   |
| &gt;5                             | 强有力支持 (Strong evidence)     |

**Bayes 因子 $\ln B \approx 20$ 表明强有力的统计证据支持使用 2 个断点的模型。</description><guid isPermaLink="true">https://astro-lee.github.io/post/bilby.html</guid><pubDate>Wed, 06 Aug 2025 08:52:59 +0000</pubDate></item><item><title>Multi-SBPL Function</title><link>https://astro-lee.github.io/post/Multi-SBPL%20Function.html</link><description>$f(x) = 10^{c}\cdot x^{-\alpha_1}\cdot\prod_{i=1}^{n-1}\left[1+\left(\frac{x}{x_{bi}}\right)^{1/\delta_i}\right]^{-\delta_i(\alpha_{i+1}-\alpha_i)}$

其中：
- $c$: 归一化幂指数。</description><guid isPermaLink="true">https://astro-lee.github.io/post/Multi-SBPL%20Function.html</guid><pubDate>Mon, 04 Aug 2025 09:05:13 +0000</pubDate></item><item><title>statistically consistent</title><link>https://astro-lee.github.io/post/statistically%20consistent.html</link><description>要验证两个变量 $\alpha_\mathrm{obs,X} = 1.286 \pm 0.030$ 和 $\alpha_\mathrm{obs,O} = 1.340 \pm 0.002$ 是否一致，我们需要检查它们的测量值在考虑到不确定度的情况下是否兼容。</description><guid isPermaLink="true">https://astro-lee.github.io/post/statistically%20consistent.html</guid><pubDate>Tue, 29 Jul 2025 02:40:51 +0000</pubDate></item><item><title>gfortran</title><link>https://astro-lee.github.io/post/gfortran.html</link><description>```
env -i HOME=$HOME PATH=/opt/homebrew/bin:/usr/bin:/bin:/usr/sbin:/sbin \
TERM=$TERM SHELL=/bin/bash \
DYLD_LIBRARY_PATH=/opt/homebrew/lib \
bash --noprofile --norc
```

```
which gfortran
# → 应该是 /opt/homebrew/bin/gfortran

gfortran --version
# → 应该是 Homebrew gcc 版本

otool -L /opt/homebrew/bin/gfortran | grep fortran
# → 应该只看到 /opt/homebrew/lib，不能有 mambaforge
```

```
cd ~/Downloads/MultiNest
rm -rf build
mkdir build &amp;&amp; cd build

cmake .. -DCMAKE_Fortran_COMPILER=/opt/homebrew/bin/gfortran
make -j4
```。</description><guid isPermaLink="true">https://astro-lee.github.io/post/gfortran.html</guid><pubDate>Thu, 26 Jun 2025 15:37:21 +0000</pubDate></item><item><title>matplotlib figsize</title><link>https://astro-lee.github.io/post/matplotlib%20figsize.html</link><description>```python&#13;
import matplotlib.pyplot as plt&#13;
&#13;
# 将宽度从 pt 转换为英寸 (1 pt = 1/72 inch)&#13;
width_pt = 242.26653 # one column 242.26653pt&#13;
#width_pt = 513.11743 # two column 513.11743pt&#13;
&#13;
width_in = width_pt / 72.27  # Matplotlib 使用 TeX 的 pt 标准 (72.27 pt = 1 inch)&#13;
&#13;
# 黄金分割比&#13;
golden_ratio = (1 + 5 ** 0.5) / 2&#13;
&#13;
# 计算高度&#13;
height_in = width_in / golden_ratio&#13;
&#13;
# 设置图片大小&#13;
fig, ax = plt.subplots(figsize=(width_in, height_in))&#13;
&#13;
# 示例绘图&#13;
ax.plot([1, 2, 3], [1, 4, 9])&#13;
ax.set_title('Example Plot')&#13;
ax.set_xlabel('X-axis')&#13;
ax.set_ylabel('Y-axis')&#13;
&#13;
# 显示图像&#13;
plt.show()&#13;
```。</description><guid isPermaLink="true">https://astro-lee.github.io/post/matplotlib%20figsize.html</guid><pubDate>Tue, 14 Jan 2025 09:46:35 +0000</pubDate></item><item><title>hc = 12.39842 Angstrom keV</title><link>https://astro-lee.github.io/post/hc%20%3D%2012.39842%20Angstrom%20keV.html</link><description>```python
from astropy.constants import h, c
from astropy import units as u

# Calculate hc in keV*Å
hc = (h * c).to(u.keV * u.angstrom)
print(hc)
```

`hc = 12.398419739640715 Angstrom keV`

---

```python
from astropy import units as u
(1 * u.erg / u.cm**2 / u.s).to(u.mJy, equivalencies=u.spectral_density(1. * u.keV))
```
`1 erg/cm^2/s = 413566769.6923858 mJy @ 1 keV` 

1. 忽略了光谱形状（如谱指数）
2. 不考虑带宽（能量段），是一个点状转换
3. 是一种“等价的点值转换”而不是“积分转换”
4. 只需要指定一个能量（或频率）点，不需要谱指数或能量段宽度。</description><guid isPermaLink="true">https://astro-lee.github.io/post/hc%20%3D%2012.39842%20Angstrom%20keV.html</guid><pubDate>Thu, 26 Dec 2024 07:51:24 +0000</pubDate></item><item><title>Link</title><link>https://astro-lee.github.io/post/Link.html</link><description>- [A web interface dealing with stellar isochrones and their derivatives (CMD)](http://stev.oapd.inaf.it/cgi-bin/cmd)
- [Demonstrations of MCMC and Nested Samplers in Physics](https://mo-ghani.github.io/Sampling/)
- [THE ONLINE MCMC](https://www.theonlinemcmc.com/)
- [定投计算器](https://danjuanfunds.com/calculator/danjuan)。</description><guid isPermaLink="true">https://astro-lee.github.io/post/Link.html</guid><pubDate>Wed, 16 Oct 2024 01:45:23 +0000</pubDate></item><item><title>Error Propagation in the Ratio NH/E(B − V)</title><link>https://astro-lee.github.io/post/Error%20Propagation%20in%20the%20Ratio%20NH-E%28B%20%E2%88%92%20V%29.html</link><description># [Variations of Interstellar Gas-to-dust Ratios at High Galactic Latitudes](https://ui.adsabs.harvard.edu/abs/2024ApJ...961..204S/abstract)&#13;
&lt;img width='720' alt='image' src='https://github.com/user-attachments/assets/edd7cdf4-4180-4c9b-b9aa-104069063b67'&gt;&#13;
&lt;img width='715' alt='image' src='https://github.com/user-attachments/assets/3af31128-61c4-4053-b2bf-23e5527eed24'&gt;&#13;
&lt;img width='720' alt='image' src='https://github.com/user-attachments/assets/7cdcf527-b89e-45cc-8d65-87ddad1d9be8'&gt;&#13;
&lt;img width='720' alt='image' src='https://github.com/user-attachments/assets/7ff3d1e4-800f-45ab-b180-351a1c1352df'&gt;&#13;
&lt;img width='720' alt='image' src='https://github.com/user-attachments/assets/730c1c82-4872-43f3-964f-127072252d33'&gt;&#13;
。</description><guid isPermaLink="true">https://astro-lee.github.io/post/Error%20Propagation%20in%20the%20Ratio%20NH-E%28B%20%E2%88%92%20V%29.html</guid><pubDate>Fri, 19 Jul 2024 15:11:05 +0000</pubDate></item><item><title>Convert K-S test probabilities to Gaussian sigma</title><link>https://astro-lee.github.io/post/Convert%20K-S%20test%20probabilities%20to%20Gaussian%20sigma.html</link><description>Kolmogorov-Smirnov（K-S）检验是一种非参数检验，用于比较样本与参考概率分布（单样本K-S检验）或比较两个样本（双样本K-S检验）。</description><guid isPermaLink="true">https://astro-lee.github.io/post/Convert%20K-S%20test%20probabilities%20to%20Gaussian%20sigma.html</guid><pubDate>Thu, 06 Jun 2024 09:09:58 +0000</pubDate></item><item><title>GCN template</title><link>https://astro-lee.github.io/post/GCN%20template.html</link><description># GRB 240411B: GMG optical observation&#13;
&#13;
```&#13;
R.-Z. Li, B.-T. Wang, J. Mao,       and J.-M. Bai (YNAO, CAS) report:&#13;
&#13;
We observed the field of GRB 240411B (Li et al., GCN 36063, T0 at 15:32:54 UT) using the GMG-2.4m telescope at the Lijiang Observatory. The observation began at 2024-04-11T21:55:31, approximately 6.4 hours after the trigger.&#13;
&#13;
The optical counterpart of GRB 240411B, not visible in the Pan-STARRS1 r-band image, was (marginally/clearly) detected at the coordinates (J2000):&#13;
RA  = 15h 26m 10.15s&#13;
DEC = -02d 08' 47.0'&#13;
, with a positional uncertainty of 0.5' or better.&#13;
&#13;
The preliminary analysis results are shown as follows:&#13;
--------------------------------------------------&#13;
Tmid-T0 [s]	filter	mag		5-sigma UL&#13;
--------------------------------------------------&#13;
23257 ± 300	R	21.16 ± 0.15	22.64&#13;
--------------------------------------------------&#13;
The given magnitudes are derived based on calibration against Pan-STARRS1 field stars and are not corrected for the expected Galactic foreground extinction, corresponding to a reddening of E(B-V) = 0.138 mag in the direction of the optical counterpart (Schlafly &amp; Finkbeiner 2011).&#13;
&#13;
We acknowledge the staff at the Lijiang Observatory for conducting the observation.&#13;
```&#13;
&#13;
# GRB 240411B: GMG optical upper limit&#13;
```&#13;
R.-Z. Li, B.-T. Wang, J. Mao,       and J.-M. Bai (YNAO, CAS) report:&#13;
&#13;
We observed the field of GRB 240411B (Li et al., GCN 36063, T0 at 15:32:54 UT) using the GMG-2.4m telescope at the Lijiang Observatory. The observation began at 2024-04-11T21:55:31, approximately 6.4 hours after the trigger.&#13;
&#13;
No any optical counterpart of GRB 240411B was detected within the XRT/EP-WXT/EP-FXT/VT error circle (GCN XXX).&#13;
&#13;
The preliminary analysis results are shown as follows:&#13;
----------------------------------&#13;
Tmid-T0 [s]	filter	5-sigma UL&#13;
----------------------------------&#13;
23257 ± 300	R	22.64&#13;
----------------------------------&#13;
The given magnitudes are derived based on calibrating against Pan-STARRS1 field stars.&#13;
&#13;
We acknowledge the staff at the Lijiang Observatory for conducting the observation.&#13;
```&#13;
&#13;
。</description><guid isPermaLink="true">https://astro-lee.github.io/post/GCN%20template.html</guid><pubDate>Sat, 20 Apr 2024 16:05:28 +0000</pubDate></item><item><title>Build deb package</title><link>https://astro-lee.github.io/post/Build%20deb%20package.html</link><description>本文介绍 deb 的构建方式&#13;
&#13;
# 前期准备&#13;
## 创建GPG公钥和私钥&#13;
```bash&#13;
gpg --full-generate-key --expert&#13;
# 记住私钥的密码&#13;
```&#13;
![image](https://github.com/Astro-Lee/astro-lee.github.io/assets/61745903/a9ba85af-5f40-41c8-b814-a96de04927aa)&#13;
&#13;
```bash&#13;
gpg --armor --export GPG密钥ID&#13;
```&#13;
复制以 `-----BEGIN PGP PUBLIC KEY BLOCK-----` 开头并以 `-----END PGP PUBLIC KEY BLOCK-----` 结尾的 GPG 密钥。</description><guid isPermaLink="true">https://astro-lee.github.io/post/Build%20deb%20package.html</guid><pubDate>Sat, 20 Apr 2024 07:02:48 +0000</pubDate></item></channel></rss>